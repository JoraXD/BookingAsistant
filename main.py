import asyncio
import json
import logging
from typing import Dict, Optional

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup

from config import TELEGRAM_BOT_TOKEN, MANAGER_BOT_TOKEN, MANAGER_CHAT_ID
from parser import (
    complete_slots,
    parse_history_request,
    generate_question,
    generate_confirmation,
    generate_fallback,
)
from atlas import build_routes_url, link_has_routes

from slot_editor import update_slots
from utils import display_transport
from storage import save_trip, get_last_trips, cancel_trip

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
manager_bot = Bot(token=MANAGER_BOT_TOKEN) if MANAGER_BOT_TOKEN else None

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
confirm_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm'),
            InlineKeyboardButton(text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data='reject'),
        ],
        [InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')],
    ]
)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –ø–æ user_id
user_data: Dict[int, Dict[str, Optional[str]]] = {}

# –í–æ–ø—Ä–æ—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ GPT –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
DEFAULT_QUESTIONS = {
    'from': '–ù–µ –ø–æ–¥—Å–∫–∞–∂–µ—Ç–µ, –∏–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤—ã–µ–∑–∂–∞–µ–º? üôÇ',
    'to': '–û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å —É—Ç–æ—á–Ω–∏—Ç—å –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è üòâ',
    'date': '–•–æ—Ä–æ—à–æ, –∞ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏ –ø–æ–º–Ω–∏—Ç–µ?',
    'transport': '–ö–∞–∫–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ø—Ä–µ–¥–ø–æ—á—Ç—ë—Ç–µ: –∞–≤—Ç–æ–±—É—Å, –ø–æ–µ–∑–¥ –∏–ª–∏ —Å–∞–º–æ–ª—ë—Ç?'
}

# –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
DEFAULT_FALLBACK = (
    '–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª‚Ä¶ –ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞?'
)

# –ù–∞–∑–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
FIELD_NAMES = {
    'from': '–≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
    'to': '–≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
    'date': '–¥–∞—Ç—É',
    'transport': '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
}


def get_missing_slots(slots: Dict[str, Optional[str]]):
    return [key for key, value in slots.items() if not value]


async def notify_manager(slots: Dict[str, Optional[str]], user: types.User):
    """Send booking info to manager bot if configured."""
    if not manager_bot or not MANAGER_CHAT_ID:
        return
    username = user.username or f"id{user.id}"
    text = (
        f"–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç @{username}:\n"
        f"```\n{json.dumps(slots, ensure_ascii=False, indent=2)}\n```"
    )
    try:
        await manager_bot.send_message(int(MANAGER_CHAT_ID), text)
    except Exception as e:
        logger.exception("Failed to notify manager: %s", e)


@dp.message(Command('start'))
async def cmd_start(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–µ–∑–¥–∫—É. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫—É–¥–∞ –∏ –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ –µ—Ö–∞—Ç—å üòÑ')


@dp.message(Command('help', 'info'))
async def cmd_help(message: Message):
    await message.answer(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–•–æ—á—É –∑–∞–≤—Ç—Ä–∞ –≤ –ú–æ—Å–∫–≤—É –Ω–∞ –ø–æ–µ–∑–¥–µ".\n'
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '/start - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n'
        '/cancel - —Å–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é'
    )


@dp.message(Command('cancel'))
async def cmd_cancel(message: Message):
    user_data.pop(message.from_user.id, None)
    await message.answer('–•–æ—Ä–æ—à–æ, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –æ –ø–æ–µ–∑–¥–∫–µ!')


async def handle_slots(message: Message):
    text = message.text
    uid = message.from_user.id
    question = user_data.get(uid, {}).pop('last_question', None)

    slots, changed = update_slots(uid, text, user_data, question)

    slots = complete_slots(slots)

    user_data[uid] = slots
    missing = get_missing_slots(slots)

    changed_msg = ''
    if changed:
        parts = [
            f"{FIELD_NAMES[k]} –Ω–∞ {display_transport(v) if k == 'transport' else v}"
            for k, v in changed.items()
        ]
        changed_msg = '–ò–∑–º–µ–Ω–∏–ª ' + ', '.join(parts) + '.\n'

    if not changed and all(not v for v in slots.values()):
        text = generate_fallback(message.text, DEFAULT_FALLBACK)
        await message.answer(text)
        return

    if missing:
        question_text = generate_question(missing[0], DEFAULT_QUESTIONS[missing[0]])
        user_data[uid]['last_question'] = question_text
        await message.answer(changed_msg + question_text)
    else:
        summary = generate_confirmation(
            slots,
            f"–û—Ç–ª–∏—á–Ω–æ, –≤–æ—Ç —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å: {display_transport(slots['transport'])} {slots['from']} ‚Üí {slots['to']} {slots['date']}. –í—Å—ë –≤–µ—Ä–Ω–æ?",
        )
        await message.answer(changed_msg + summary, reply_markup=confirm_keyboard)
        user_data[uid]['confirm'] = True


@dp.message()
async def handle_message(message: Message):
    uid = message.from_user.id
    action = parse_history_request(message.text)

    if action.get('action') == 'show':
        limit = int(action.get('limit', 5))
        trips = get_last_trips(uid, limit=limit)
        if not trips:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–µ–∑–¥–æ–∫.')
        else:
            lines = [
                f"{t['id']}: {t['origin']} ‚Üí {t['destination']} {t['date']} "
                f"{display_transport(t['transport'])} [{t['status']}]"
                for t in trips
            ]
            await message.answer('\n'.join(lines))
        return

    if action.get('action') == 'cancel':
        dest = action.get('destination', '').lower()
        if dest:
            trips = get_last_trips(uid, limit=20)
            for t in trips:
                if t['destination'].lower() == dest and t['status'] == 'active':
                    cancel_trip(t['id'])
                    await message.answer(
                        f"–ü–æ–µ–∑–¥–∫–∞ –≤ {t['destination']} –æ—Ç–º–µ–Ω–µ–Ω–∞."
                    )
                    return
        await message.answer('–ü–æ–µ–∑–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        return
    if user_data.get(uid, {}).get('confirm'):
        if message.text.lower() in {'–¥–∞', 'yes', 'confirm', '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'}:
            slots = user_data.pop(uid)
            slots.pop('confirm', None)
            if slots.get('transport', '').lower() in {'–∞–≤—Ç–æ–±—É—Å', 'bus', '–∞–≤—Ç–æ–±—É—Å—ã'}:
                url = build_routes_url(slots['from'], slots['to'], slots['date'])
                if link_has_routes(slots['from'], slots['to'], slots['date']):
                    await message.answer(url)
                else:
                    await message.answer('–†–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
            await notify_manager(slots, message.from_user)
            save_trip({
                'user_id': uid,
                'origin': slots['from'],
                'destination': slots['to'],
                'date': slots['date'],
                'transport': slots['transport'],
                'status': 'active',
            })
            response = {
                "message": "–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—É, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è!"
            }
            await message.answer(
                f"\n```\n{json.dumps(response, ensure_ascii=False, indent=2)}\n```"
            )
        elif message.text.lower() in {'–æ—Ç–º–µ–Ω–∞', 'cancel'}:
            user_data.pop(uid, None)
            await message.answer('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑!')
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ—Ç—ã –≤–æ –≤—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            user_data[uid].pop('confirm', None)
            slots, changed = update_slots(uid, message.text, user_data)
            slots = complete_slots(slots)
            changed_msg = ''
            if changed:
                parts = [
                    f"{FIELD_NAMES[k]} –Ω–∞ {display_transport(v) if k == 'transport' else v}"
                    for k, v in changed.items()
                ]
                changed_msg = '–ò–∑–º–µ–Ω–∏–ª ' + ', '.join(parts) + '.\n'

            missing = get_missing_slots(slots)
            if missing:
                question_text = generate_question(missing[0], DEFAULT_QUESTIONS[missing[0]])
                user_data[uid]['last_question'] = question_text
                await message.answer(changed_msg + question_text)
            else:
                summary = generate_confirmation(
                    slots,
                    f"–û—Ç–ª–∏—á–Ω–æ, –≤–æ—Ç —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å: {display_transport(slots['transport'])} {slots['from']} ‚Üí {slots['to']} {slots['date']}. –í—Å—ë –≤–µ—Ä–Ω–æ?",
                )
                await message.answer(
                    changed_msg + summary,
                    reply_markup=confirm_keyboard,
                )
                user_data[uid]['confirm'] = True
    else:
        await handle_slots(message)


@dp.callback_query(F.data == 'confirm')
async def cb_confirm(query: types.CallbackQuery):
    uid = query.from_user.id
    slots = user_data.pop(uid, None)
    await query.message.edit_reply_markup()
    if slots:
        slots.pop('confirm', None)
        if slots.get('transport', '').lower() in {'–∞–≤—Ç–æ–±—É—Å', 'bus', '–∞–≤—Ç–æ–±—É—Å—ã'}:
            url = build_routes_url(slots['from'], slots['to'], slots['date'])
            if link_has_routes(slots['from'], slots['to'], slots['date']):
                await query.message.answer(url)

            else:
                await query.message.answer('–†–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
        await notify_manager(slots, query.from_user)
        save_trip({
            'user_id': uid,
            'origin': slots['from'],
            'destination': slots['to'],
            'date': slots['date'],
            'transport': slots['transport'],
            'status': 'active',
        })
        response = {
            "message": "–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—É, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è!"
        }
        await query.message.answer(
            f"\n```\n{json.dumps(response, ensure_ascii=False, indent=2)}\n```"
        )
    await query.answer()


@dp.callback_query(F.data == 'reject')
async def cb_reject(query: types.CallbackQuery):
    user_data.pop(query.from_user.id, None)
    await query.message.edit_reply_markup()
    await query.message.answer('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ—â—ë —Ä–∞–∑.')
    await query.answer()


@dp.callback_query(F.data == 'cancel')
async def cb_cancel(query: types.CallbackQuery):
    user_data.pop(query.from_user.id, None)
    await query.message.edit_reply_markup()
    await query.message.answer('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –Ω–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞!')
    await query.answer()


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
